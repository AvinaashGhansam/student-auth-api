@startuml Student_Auth_API_Class_Diagram
!theme plain
skinparam classAttributeIconSize 0
skinparam defaultFontName Arial
skinparam defaultFontSize 11
skinparam backgroundColor #F5F5F5
skinparam class {
    BackgroundColor #FFF9C4
    BorderColor #F57F17
    FontColor #1A237E
    HeaderBackgroundColor #FFD54F
}
skinparam package {
    BackgroundColor #E8EAF6
    BorderColor #3F51B5
}
skinparam stereotype {
    CBackgroundColor #C5CAE9
    EBackgroundColor #B39DDB
    IBackgroundColor #9FA8DA
}

title Student Auth API - Class Diagram with Packages

' Controllers Package
package "controllers" #E3F2FD {
    class SheetController {
        - service: SheetService
        + getLogs(req: Request, res: Response, next: NextFunction): Promise<void>
        + getSheetById(req: Request, res: Response, next: NextFunction): Promise<void>
        + createSheet(req: Request, res: Response, next: NextFunction): Promise<void>
        + updateSheet(req: Request, res: Response, next: NextFunction): Promise<void>
        + deleteSheet(req: Request, res: Response, next: NextFunction): Promise<void>
    }

    class LogController {
        - service: LogService
        + getLogs(req: Request, res: Response, next: NextFunction): Promise<void>
        + createLog(req: Request, res: Response, next: NextFunction): Promise<void>
    }
}

' Services Package
package "services" #E8F5E9 {
    class SheetService {
        + createSheet(data: Partial<ISheet>): Promise<ISheet>
        + getSheets(): Promise<ISheet[]>
        + getSheetById(id: string): Promise<ISheet>
        + updateSheet(id: string, data: Partial<ISheet>): Promise<ISheet>
        + deleteSheet(id: string): Promise<void>
    }

    class LogService {
        + createLog(data: Partial<ILog>): Promise<ILog>
        + getLogs(): Promise<ILog[]>
    }
}

' Models Package
package "models" #FFF3E0 {
    interface ISheet <<interface>> {
        + className: string
        + dateCreated: string
        + secretKey?: string
        + isActive: boolean
        + location: {lat: string, lng: string}
        + maxRadius?: string
        + createdBy?: string
        + reportId?: string
    }

    interface ILog <<interface>> {
        + sheetId: string
        + id: string
        + name?: string
        + studentId?: string
        + signedInAt?: string
        + className?: string
        + location?: {lat: number, lng: number}
        + locationDenied?: boolean
        + fingerprint?: string
    }

    class SheetModel <<Model>> {
        {static} + model<ISheet>("Sheet", SheetSchema)
    }

    class LogModel <<Model>> {
        {static} + model<ILog>("Log", LogSchema)
    }
}

' Routes Package
package "routes/api/v1" #FCE4EC {
    class SheetRouter <<Router>> {
        + GET /
        + POST /
        + GET /:_id
        + PUT /:_id
        + PATCH /:_id
        + DELETE /:_id
    }

    class LogRouter <<Router>> {
        + GET /
        + POST /
    }
}

' Utils Package
package "utils" #F3E5F5 {
    class ApiError extends Error {
        + statusCode: number
        + constructor(statusCode: number, message: string)
    }

    class Logger <<Singleton>> {
        + level: string
        + format: Format
        + transports: Transport[]
        + error(message: string): void
        + info(message: string): void
        + warn(message: string): void
    }
}

' Middleware Package
package "middleware" #E8EAF6 {
    class ErrorHandler {
        + handle(err: any, req: Request, res: Response, next: NextFunction): void
    }
}

' Config Package
package "config" #E0F2F1 {
    class Config <<Singleton>> {
        + {readonly} apiPrefix: string
        + {readonly} apiVersion: string
        + {readonly} port: number
        + {readonly} dbUri: string
        - constructor()
        - validatePort(): void
        - validateDbUri(): void
    }
}

' Server Package
package "server" #EFEBE9 {
    class Server <<Main>> {
        - app: Express
        - PORT: number
        + configureMiddleware(): void
        + configureRoutes(): void
        + configureSwagger(): void
        + connectDatabase(): Promise<void>
        + start(): Promise<void>
    }
}

' External Dependencies (simplified)
package "external" <<External>> #E0E0E0 {
    interface Request <<Express>> {
        + body: any
        + params: any
        + query: any
    }

    interface Response <<Express>> {
        + json(data: any): Response
        + status(code: number): Response
        + end(): void
    }

    interface NextFunction <<Express>> {
        + (error?: any): void
    }

    class Document <<Mongoose>> {
        + save(): Promise<this>
        + remove(): Promise<this>
    }

    class Schema <<Mongoose>> {
        + constructor(definition: any)
    }
}

' Relationships - Dependency/Usage
SheetController --> SheetService : uses
LogController --> LogService : uses

SheetService --> SheetModel : uses
LogService --> LogModel : uses

SheetModel ..|> ISheet : implements
LogModel ..|> ILog : implements

SheetModel --|> Document : extends
LogModel --|> Document : extends

SheetRouter --> SheetController : routes to
LogRouter --> LogController : routes to

ErrorHandler --> Logger : logs errors
ErrorHandler --> ApiError : handles

SheetController ..> Request : uses
SheetController ..> Response : uses
SheetController ..> NextFunction : uses
LogController ..> Request : uses
LogController ..> Response : uses
LogController ..> NextFunction : uses

Server --> SheetRouter : registers
Server --> LogRouter : registers
Server --> ErrorHandler : uses
Server --> Config : uses

' Notes for key patterns
note right of SheetController
    Uses dependency injection
    pattern with service instance
end note

note left of Config
    Singleton pattern with
    environment validation
end note

note bottom of SheetModel
    Mongoose models are factories
    that create Document instances
end note

' Cardinality
SheetController "1" --> "1" SheetService
LogController "1" --> "1" LogService
SheetService "1" --> "*" SheetModel : creates/queries
LogService "1" --> "*" LogModel : creates/queries

@enduml