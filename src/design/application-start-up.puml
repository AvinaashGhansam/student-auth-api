@startuml Application_Startup
!theme plain
skinparam backgroundColor #FAFAFA
skinparam sequence {
    ArrowColor #1976D2
    ActorBorderColor #0D47A1
    LifeLineBorderColor #42A5F5
    LifeLineBackgroundColor #E3F2FD
    ParticipantBorderColor #1565C0
    ParticipantBackgroundColor #BBDEFB
}

title Sequence 5: Application Startup Process

participant "Docker\nCompose" as Docker
participant "MongoDB\nContainer" as MongoContainer
participant "App\nContainer" as AppContainer
participant "Server.ts" as Server
participant "Config" as Config
participant "Mongoose" as Mongoose
participant "Express\nApp" as App

Docker -> MongoContainer: Start MongoDB container
activate MongoContainer
MongoContainer -> MongoContainer: Health check
note right: Check db.runCommand("ping")

Docker -> AppContainer: Start app container\n(depends on mongo health)
activate AppContainer

AppContainer -> Server: Load server.ts
activate Server

Server -> Config: Load environment variables
activate Config
Config -> Config: Validate PORT
Config -> Config: Validate DB_URI
Config --> Server: Config instance
deactivate Config

Server -> App: Initialize Express
activate App
App -> App: app.use(cors())
App -> App: app.use(express.json())
App -> App: Register routes
App -> App: Setup Swagger UI
App --> Server: Configured app
deactivate App

Server -> Mongoose: connect(MONGODB_URI)
activate Mongoose
Mongoose -> MongoContainer: Establish connection
MongoContainer --> Mongoose: Connection established
deactivate MongoContainer
Mongoose --> Server: Connected
deactivate Mongoose

Server -> App: app.listen(PORT)
Server --> AppContainer: Server running on port 3000
deactivate Server

AppContainer --> Docker: Application ready
deactivate AppContainer

note over Docker
    Available endpoints:
    - http://localhost:3000/api/v1/sheets
    - http://localhost:3000/api/v1/logs
    - http://localhost:3000/api/v1/docs
end note

@enduml