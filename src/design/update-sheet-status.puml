@startuml Update_Sheet_Error_Handling
!theme plain
skinparam backgroundColor #FAFAFA
skinparam sequence {
    ArrowColor #1976D2
    ActorBorderColor #0D47A1
    LifeLineBorderColor #42A5F5
    LifeLineBackgroundColor #E3F2FD
    ParticipantBorderColor #1565C0
    ParticipantBackgroundColor #BBDEFB
}

title Update Sheet Status with Error Handling

actor Professor
participant "Express\nServer" as Express
participant "Sheet\nRouter" as Router
participant "Async\nHandler" as Async
participant "Sheet\nController" as Controller
participant "Sheet\nService" as Service
participant "Sheet\nModel" as Model
participant "Error\nHandler" as ErrorHandler
participant "Logger" as Logger
database MongoDB

Professor -> Express: PUT /api/v1/sheets/:id\n{isActive: false}
activate Express

Express -> Router: Route request
activate Router

Router -> Async: asyncHandler(updateSheet)
activate Async

Async -> Controller: updateSheet(req, res, next)
activate Controller

Controller -> Service: updateSheet(id, data)
activate Service

Service -> Model: findByIdAndUpdate(id, data, {new: true})
activate Model

Model -> MongoDB: Update document
activate MongoDB

alt Sheet Not Found
    MongoDB --> Model: null
    deactivate MongoDB
    Model --> Service: null
    deactivate Model
    Service --> Controller: null
    deactivate Service

    Controller -> Controller: Check if (!sheet)
    Controller --> Express: res.status(404).json({error: "Not found"})
    deactivate Controller
    deactivate Async
    deactivate Router
    Express --> Professor: 404 Not Found
    deactivate Express

else Sheet Found and Updated
    MongoDB --> Model: Updated document
    Model --> Service: Updated ISheet
    Service --> Controller: Updated sheet
    Controller --> Express: res.json(sheet)
    Express --> Professor: 200 OK\n{updated sheet}

else Database Error
    MongoDB --> Model: Error
    Model --> Service: throw Error
    Service --> Controller: throw Error
    Controller --> Async: Error caught
    deactivate Controller

    Async -> Controller: next(error)
    activate Controller
    Controller -> ErrorHandler: handle(err, req, res, next)
    deactivate Controller
    activate ErrorHandler

    ErrorHandler -> Logger: error(err.stack)
    activate Logger
    Logger --> ErrorHandler: Logged
    deactivate Logger

    ErrorHandler -> ErrorHandler: Determine status & message
    ErrorHandler --> Express: res.status(500).json({error: message})
    deactivate ErrorHandler
    deactivate Async
    deactivate Router
    Express --> Professor: 500 Internal Server Error
    deactivate Express
end

@enduml